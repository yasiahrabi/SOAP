<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SOAP.BaseService">
<Description>
SOAP.BaseService is the base class for all sample web services.
SOAP.BaseService illustrates moving error handling for all 
services into a common base class.
Currently SOAP.Demo is the only sample web service.</Description>
<Abstract>1</Abstract>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<TimeCreated>59203,11782.328</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
Namespace.
Each web service needs to supply this parameter.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of our web service.
Each web service needs to supply this parameter.</Description>
<Default>SOAPBase</Default>
</Parameter>

<Method name="OnInternalFault">
<Description>
Override to fix the fault for our needs.
The OnInternalFault method will be called for all internal Cache errors
after the default Cache fault has been created.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fault:%SOAP.Fault,status:%Status</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do $system.Status.DecomposeStatus(status,.err)
	Set detail=$c(13,10)_"    <error xmlns='"_..Namespace()_"' >"_$c(13,10)
	Set detail=detail_"<special>Internal error detected.</special>"
	Set detail=detail_"     <text>"_$ZConvert(err(1),"O","HTML")_"</text>"_$c(13,10)
	Set detail=detail_"    </error>"_$c(13,10)
	Set fault.detail=detail
	Set fault.faultstring="Sample Web Service error"
	Quit
]]></Implementation>
</Method>

<Method name="ApplicationError">
<Description>
Create our own method to produce application specific SOAP faults.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,error:%String,detail:%String=""</FormalSpec>
<Implementation><![CDATA[
	set fault=##class(%SOAP.Fault).%New()
	set fault.faultcode=code
	set fault.detail=detail
	set fault.faultstring=error
	// ReturnFault must be called to send the fault to the client.
	// ReturnFault will not return here.
	do ..ReturnFault(fault)
]]></Implementation>
</Method>

<Method name="StatusError">
<Description>
Application specific error based on status code</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,status:%Status</FormalSpec>
<Implementation><![CDATA[
	Do $system.Status.DecomposeStatus(status,.err)
	Do ..ApplicationError(code,"application error",err(1))
]]></Implementation>
</Method>
</Class>
</Export>
