<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2012.1 (Build 342U)" ts="2011-06-29 12:24:35">
<Class name="SOAP.Demo">
<Description><![CDATA[
A simple demonstration Web Service<BR>
To try this, visit
<A href="/csp/samples/SOAP.Demo.cls">/csp/samples/SOAP.Demo.cls</A>
This web service inherits from the SOAP.BaseService sample class 
 to pickup common error handling.]]></Description>
<Import>Sample</Import>
<IncludeCode>%soap</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>SOAP.BaseService</Super>
<TimeChanged>62271,44611.697859</TimeChanged>
<TimeCreated>58821,54577</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The LOCATION parameter is no longer required, since it now defaults to the path used to request the WSDL. 

]]></Content>
</UDLText>

<Parameter name="NAMESPACE">
<Description>
Namespace. Change this to your own namespace when you deploy a service.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of our web service.</Description>
<Default>SOAPDemo</Default>
</Parameter>

<Parameter name="SOAPHEADERS">
<Description>
The list of request SOAP headers that are supported by this web service.
Each entry in the comma separated list is of the form "headerElement:headerClassname".</Description>
<Default>LicenseInfo:SOAP.LicenseInfo</Default>
</Parameter>

<Method name="AddInteger">
<Description>
Adds two integers and returns the result.</Description>
<FormalSpec>Arg1:%Integer,Arg2:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit Arg1 + Arg2
]]></Implementation>
</Method>

<Method name="DivideInteger">
<FormalSpec>Arg1:%Integer,Arg2:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	// The fault for division by 0 will be trapped and adjusted by SOAP.BaseService.
	Quit Arg1/Arg2
]]></Implementation>
</Method>

<Method name="Mission">
<Description>
Returns a corporate mission statement.</Description>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ##class(%PopulateUtils).Mission()
]]></Implementation>
</Method>

<Method name="LookupCity">
<Description><![CDATA[
Returns the city and state for the given U.S. ZIP Code
packaged within a <class>Sample.Address</class> object.]]></Description>
<FormalSpec>zip:%String</FormalSpec>
<ReturnType>Sample.Address</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	// Error check that zip code is required.
	If $get(zip)="" {
		// Application specific fault generator from SOAP.BaseService sample.
		Do ..ApplicationError($$$FAULTClient,"Zip code not specified")
	}
	
	// Get LicenseInfo SOAP header and validate it if present.
	Set license = ..HeadersIn.GetAt("LicenseInfo")
	If license '= "" {
		// If any license information return ResponseInfo header
		Set response = ##class(SOAP.ResponseInfo).%New()
		Set response.ResponseCode = 0
		Set response.Response = "City returned"
		Do ..HeadersOut.SetAt(response,"ResponseInfo")

		// If registered user return SubscriptionInfoHeader
		Set registered = license.RegisteredUser
		If registered '= "" {
			Set subscription = ##class(SubscriptionInfo).%New()
			Set subscription.LicenseStatusCode = 0
			Set subscription.LicenseStatus = "Registered user: "_registered.UserID
			Set subscription.LicenseActionCode = 0
			Set subscription.LicenseAction = "Request Executed"
			Set subscription.RemainingHits = 99
			Set subscription.Amount = 0.0
			Do ..HeadersOut.SetAt(subscription,"SubscriptionInfo")
		}
	}

	// create an Address object to hold the result
	Set obj = ##class(Sample.Address).%New()

	// Use embedded SQL to perform the lookup
	&sql(SELECT City,State INTO :city, :state
			FROM Sample.USZipCode
			WHERE ZipCode = :zip )
			
	If (SQLCODE = 0) {
		// success			
		Set obj.City = city
		Set obj.State = state
		Set obj.Zip = zip
	}
	Else {
		// Application specific fault generator from SOAP.BaseService sample.
		Do ..ApplicationError($$$FAULTClient,"Zip code not found: "_zip)
	}

	Quit obj
]]></Implementation>
</Method>

<Method name="FindPerson">
<Description><![CDATA[
Returns data about the person in the database with
object ID of <var>id</var>.]]></Description>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Sample.Person</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	// Return an instance of person.  Null is returned for invalid id.
	Quit ##class(Sample.Person).%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetByName">
<Description>
A sample web method to invoke dynamic SQL to query the Sample.Person class and
   return the results as a .NET untyped DataSet</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%XML.DataSet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 ; Return the results of the Person class' by name.
 Set result=##class(%XML.DataSet).%New()
 Set status=result.Prepare("SELECT ID, Name, DOB, SSN FROM Sample.Person WHERE Name %STARTSWITH ? ORDER BY Name")
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Set result.DataSetName="ListByName"
 Set status=result.Execute(name)
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Quit result
]]></Implementation>
</Method>

<Method name="GetListByName">
<Description>
A sample web method to invoke dynamic SQL to query the Sample.Person class and
return the results as a list of objects.</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>Sample.ListOfPersonIdentification</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 ; Create a result set for the Person class' by name.
 Set result=##class(%ResultSet).%New()
 Set status=result.Prepare("SELECT ID, Name, DOB, SSN FROM Sample.Person WHERE Name %STARTSWITH ? ORDER BY Name")
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Set status=result.Execute(name)
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)

 ; Create a list of objects for the rows and populate the list.
 Set list=##class(Sample.ListOfPersonIdentification).%New()
 While result.Next(.status) {
	Set obj=##class(Sample.PersonIdentification).%New()
	Set obj.ID=result.Get("ID")
	Set obj.Name=result.Get("Name")
	Set obj.DOB=result.Get("DOB")
	Set obj.SSN=result.Get("SSN")
	Do list.Insert(obj)
 }
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)

 ; Return the list of objects.
 Quit list
]]></Implementation>
</Method>

<Method name="GetDataSetByName">
<Description>
A sample web method to invoke the ByName query of the Sample.Person class and
return the results as a .NET typed DataSet</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>SOAP.ByNameDataSet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 ; Return the results of the Person class' ByName query.
 Set result=##class(SOAP.ByNameDataSet).%New()
 Set status=result.Execute(name)
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Quit result
]]></Implementation>
</Method>

<Query name="QueryByName">
<Description><![CDATA[
A sample class query as a WebMethod that defines a typed dataset that returns Person data 
ordered by <property>Name</property>.<br>
This query also generates a WebMethod of the same name that may be called using SOAP
in order to return a typed .Net DataSet.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>name:%String</FormalSpec>
<SqlQuery> SELECT ID, Name, DOB, SSN
 FROM Sample.Person
 WHERE (Name %STARTSWITH :name)
 ORDER BY Name</SqlQuery>
<WebMethod>1</WebMethod>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>
</Class>
</Export>
